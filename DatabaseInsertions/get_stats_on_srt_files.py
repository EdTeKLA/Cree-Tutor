"""
Files contains functions/classes which turns takes srt files and returns the following statistics:
    - Words per minute
    - Character per minute
    - Word length(mean, median, min, max)
    - Srt files names and media files name with the desired extension to be added to db
"""

import re
import numpy as np


class SRTFileStatistics:
    @staticmethod
    def get_srt_stats(file_contents):
        """
        File returns all the statistics generated by this class, this includes:
                - Words per minute
                - Character per minute
                - Word length(mean, median, min, max)

        :param file_contents:
        :return:
        """
        # Read the file and parse it
        words, total_time = SRTFileStatistics.__read_file_and_return_and_returns_words_and_total_time(file_contents)
        # Get length of all the words in words_len
        words_len = [len(word) for word in words]
        # Get all the stats
        stats = {
            'mean': np.mean(words_len),
            'median': np.median(words_len),
            'min': np.min(words_len),
            'max': np.max(words_len),
            'words_per_minute': len(words)/(total_time/60),
            'chars_per_minute': np.sum(words_len)/(total_time/60),
            'number_of_words': len(words),
            'number_of_chars': np.sum(words_len)
        }

        return stats

    @staticmethod
    def __read_file_and_return_and_returns_words_and_total_time(file_contents):
        words = []
        total_time = 0.0

        # Iterating over every line.
        for line in file_contents:
            if re.match('\d{2}:\d{2}:\d{2}[,.]\d{3} --> \d{2}:\d{2}:\d{2}[,]\d{3}', line):
                # Get the time statistics, meaning, take the time and convert it to milliseconds if the line contains
                # a time
                times = line.strip().split(" --> ")
                start_time = SRTFileStatistics.__time_in_seconds(times[0])
                end_time = SRTFileStatistics.__time_in_seconds(times[1])

                total_time += end_time - start_time
            elif re.match('(\d+)\n', line):
                # Ignore the line number
                pass
            elif line != "\n" and line != "":
                # Split the line and add the list of new words to the words list
                words += line.strip().split(" ")

        return words, total_time

    @staticmethod
    def __time_in_seconds(time):
        # Split the time using colons and commas
        time_comps = re.split("[:,]", time)
        # Time to millseconds
        time = (
            int(time_comps[0]) * 3600 + int(time_comps[1]) * 60 + int(time_comps[2])
        )
        return time

class PrepareAdditionalInformationForFile:
    """
    Prepares: name, sub_location and sound_location for insertion in db.
    """
    @staticmethod
    def prepare_additional_information_for_file(file_name, file_stats, media_file_extension):
        """
        Takes file names and a file_stats dict and adds name, sub_location and sound_location for insertion in db.
        :param file_name:
        :param file_stats:
        :return:
        """
        # First we need to convert the file name to an actual name
        name = file_name.replace(".srt", "")
        name = name.replace("_", " ")
        name = name.title()
        # Now add the name
        file_stats['name'] = name
        # Now add the sub_location and the sound_location
        file_stats['sub_location'] = "static/srts/" + file_name
        file_stats['media_location'] = "media/" + file_name.replace(".srt", "") + "." + media_file_extension

        return file_stats